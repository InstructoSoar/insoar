#supports Doing X on Y causes Q to become W

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-causation
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type causation
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-cause
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# Elaborate useful information from the message onto the operator

sp {interpret-message*elaborate*interpret-cause*participants
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-cause
        ^message <msg>)
   (<msg> ^arg1 <partic1>
   		  ^cause.arg1.2 <partic2>)
   # Stuff on the message
-->	
   (<o> ^participants <pars>)
   (<pars> ^participant1 <partic1>
   		  ^participant2 <partic2>)
   # Elaborate operator
}

sp {interpret-message*elaborate*interpret-cause*cause
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-cause
        ^message <msg>)
   (<msg> ^cause <cs>)   # Stuff on the message
-->	
   (<o> ^cause <cs>)
   # Elaborate operator
}

sp {interpret-message*elaborate*interpret-cause*effect
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-cause
        ^message <msg>)
   (<msg> ^action <action>
   		  ^arg1 <arg1>)   # Stuff on the message
-->	
   (<o> ^effect-action <action>
   		^effect-arg <arg1>)
}

sp {interpret-message*elaborate*interpret-cause*effect*pred-change
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-cause
        ^message <msg>
        ^effect-action <action>)
   (<action> ^procedural.op_name op_becomes-on1)
-->	
   (<o> ^effect-pred-change-name activation1
   	    ^effect-pred-change-value on1)

}

#####
# OPERATOR APPLICATION
#####

#the segment has the information on it from the message
#creating a new segment
sp {interpret-message*apply*interpret-cause*create*segment
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-cause
        ^message <msg>
        ^participant1 <par1>
        ^participant2 <par2>
        ^cause <cs>
        ^effect-action <effact>
        ^effect-arg <effarg>
        -^effect-pred-change-name <effpred>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-causal-model
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type causal-model)
   (<params> ^participant1 <par1>
   			 ^participant2 <par2>
   			 ^cause <cs>
   			 ^effect <eff>)
   (<eff> ^action <effact>
   	      ^arg <effarg>)
}

sp {interpret-message*apply*interpret-cause*create*segment*pred-change
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-cause
        ^message <msg>
        ^participants <pars>
        ^cause <cs>
        ^effect-pred-change-name <effpredname>
        ^effect-pred-change-value <effpredval>
        ^effect-arg <effarg>)
   (<pars> ^participant1 <par1>
        ^participant2 <par2>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-causal-model
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type causal-model)
   (<params> ^participant1 <par1>
   			 ^participant2 <par2>
   			 ^cause <cs>
   			 ^effect <eff>)
   (<eff> ^pred-change <effpred>
   		  ^arg <effarg>)
   (<effpred> ^name <effpredname>
   			^value <effpredval>)
}















              