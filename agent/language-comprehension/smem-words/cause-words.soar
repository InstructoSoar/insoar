####
smem --add {
              (<x> ^spelling |flipping|
                   ^super-type @20998   #Gerund
                   ^referent <ref>)
              (<y> ^spelling |turning|  
                   ^super-type @20998   #Gerund
                   ^referent <ref>)  
(<ref> ^handle flip-on1 ^procedural <proc005> ^item-type action)  # Change flip1 to Flip-on or whatever you want.
(<proc005> ^op_name op_flip-on1   # Change flip1 to Flip-on or whatever you want.
          ^arg1 <parg0051>)
(<parg0051> ^arg-type object ^id <obj-slot0051>)
}
 
smem --add {            
           (@20998 ^structure-type G
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1>
                   ^converts-to GP)
           (<VT1> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^required true)
}

smem --add {
           (<x> ^spelling |lightswitch|
                ^structure-type N
                ^referent <x-id>
                ^number singular)
           (<x-id> ^handle lightswitch1 ^property @404000 ^item-type object)

           (<y> ^spelling |wallswitch|  
                ^structure-type N
                ^referent <x-id>
                ^number singular)
}        

smem --add {          
           (<x> ^spelling |causes|  # should add makes
                   ^type V  
                   ^referent @101155)
           (<y> ^spelling |makes|  # should add makes
                   ^type V  
                   ^referent @101155)
           (@101155 ^handle cause1 ^item-type cause-action ^learn-proposal false ^perform once)
}  

smem --add {
           (<x> ^spelling |lamp|  
                   ^structure-type N
                   ^referent <x-id>
                   ^number singular)
           (<x-id> ^handle lamp1 ^property @404000 ^item-type predicate)  #visual
}

smem --add {
           (<lx> ^spelling |become|  
                  ^super-type @60994 #no subsequent words
                  ^referent <ref1>)

           (<becomeon> ^current-word |on|
                       ^prior-word |become|
                       ^prior-word-lti <ref1>
                       ^spelling |become-on|
                       ^super-type @60994
                       ^referent <ref1>
                       ^semantic-structure arg1
                       ^consumes-prior-word true)
(<ref1> ^handle become-on1 ^item-type change-state-action ^procedural <proc31>)
            (<proc31> ^op_name op_becomes-on1)

           (<becomeoff> ^current-word |off|
                       ^prior-word |become|
                       ^prior-word-lti <ref2>
                       ^spelling |become-off|
                       ^super-type @60994
                       ^referent <ref2>
                       ^semantic-structure arg1
                       ^consumes-prior-word true)
(<ref2> ^handle become-off1 ^item-type change-state-action ^procedural <proc32>)
            (<proc32> ^op_name op_becomes-off1)
}
smem --add {
           (<lx> ^spelling |be|  
                  ^super-type @60994 #no subsequent words
                  ^referent <ref1>)

           (<becomeon> ^current-word |on|
                       ^prior-word |be|
                       ^prior-word-lti <ref1>
                       ^spelling |be-on|
                       ^super-type @60994
                       ^referent <ref1>
                       ^semantic-structure arg1
                       ^consumes-prior-word true)
(<ref1> ^handle become-on1 ^item-type change-state-action ^procedural <proc31>)
            (<proc31> ^op_name op_becomes-on1)

           (<becomeoff> ^current-word |off|
                       ^prior-word |be|
                       ^prior-word-lti <ref2>
                       ^spelling |be-off|
                       ^super-type @60994
                       ^referent <ref2>
                       ^semantic-structure arg1
                       ^consumes-prior-word true)
(<ref2> ^handle become-off1 ^item-type change-state-action ^procedural <proc32>)
            (<proc32> ^op_name op_becomes-off1)
}
smem --add {
            (<GP-cause> ^construction |*-GP-causes-DP-to-VP|
                        ^current-word |causes|
                        ^prior-word GP
                        ^prior-word-first true
                        ^structure-type CP
                        ^message-type causation
                        ^assigners <VT0>  
                                  <VT2> <VT3> <VT4>
                    )
           (<VT0> ^structure-type GP  #Gerund Phrase  #Flipping
                  ^relative-position before
                  ^syntactic-structure complement
                  ^semantic-structure *embed*
                  ^embed-structure cause
                  ^required true  
                  ^before <VT2>)
           (<VT2> ^structure-type DP  
                  ^relative-position after
                  ^before <VT3>
                  ^next <VT3>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<VT3> ^structure-type P
                  ^lexical-item-spelling |to|
                  ^before <VT4>
                  ^syntactic-structure complement
                  ^required true)
           (<VT4> ^structure-type VP
                  ^semantic-structure action
                  ^referent-type literal
                  ^syntactic-structure complement
                  ^required true
                 )
           }

smem --add {
           (<x> ^spelling |precondition|  
                   ^structure-type N
                   ^syntactic-referent-type DP
                   ^object-feature handle
                   ^referent <x-id>
                   ^number singular)
           (<x-id> ^handle precondition1 ^property <concept>)
           (<concept> ^handle concept ^type conceptual)  
}
smem --add {
           (<adja> ^spelling |connected|
                   ^structure-type P
                   ^relation <connects>
                   ^converts-to PP)
  (<connects> ^handle connects ^item-type relation ^relation-type existing)

           (<next> ^prior-word |connected|
                   ^current-word |to|
                   ^spelling |connect-to|  
                   ^structure-type P
                   ^relation <connects>
                   ^assigners <next-to1>
                   ^converts-to PP)
           (<next-to1> ^structure-type DP
                    ^relative-position after
                    ^syntactic-structure head
                    ^required true)
}