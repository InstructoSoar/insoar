
#elaborate equivalent object decriptions
sp {convert-TCN-to-NL*elaborate*same-description
   (state <s> ^name convert-TCN-to-NL
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>})
   -{(<objd> ^word <word>)
     (<objd2> -^word <word>)}
   -{(<objd> ^adjective <adj>)
     (<objd2> -^adjective <adj>)}
   -{(<objd> ^type <type>)
     (<objd2> -^type <type>)}
-->
   (<objd> ^same-description <objd2>)
}

sp {convert-TCN-to-NL*elaborate*mentioned-obj
   (state <s> ^name convert-TCN-to-NL
              ^sentence.condition.<< a b c >> <arg>
              ^param.<arg>.id <id>
              ^state-rep.object-desc-set.obj-desc <objd>)
   (<objd> ^id <id>)
-->
   (<objd> ^mentioned true)
}

     
sp {convert-TCN-to-NL*propose*create-sentence
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
             -^sentence.condition <cond>
              ^tcn.conditions.cond.prep <cond>)
   -{(<cond> ^b <argb> ^c <argc>)
     (<s> ^param.<argc>.id <idc>
          ^state-rep.object-desc-set.obj-desc <objd2>)
     (<objd2> ^id <idc> -^mentioned true)}
   -{(<cond> ^b <argb> ^c <argc>)
     (<s> ^param.<argb>.id <idb>
          ^state-rep.object-desc-set.obj-desc <objd>)
     (<objd> ^id <idb> -^mentioned true)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>
        ^category svs)
}

sp {convert-TCN-to-NL*apply*create-sentence*3arg*DEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^param.<argc>.id <idc>
              ^state-rep.object-desc-set.obj-desc {<objd> <> <objd3>}
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^state-rep.object-desc-set.obj-desc {<objd3> <> <objd2>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^c <argc> ^negative <bool> ^name <prep>)
   (<objd> ^id <id> ^mentioned true)
   (<objd2> ^id <idb> ^mentioned true)
   (<objd3> ^id <idc> ^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^object3 <objd3>
           ^a <aspec> 
           ^b <bspec>
           ^c <cspec> 
           ^word <prep>
           ^prep <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier the)
   (<bspec> ^specifier the)
   (<cspec> ^specifier the)
}
sp {convert-TCN-to-NL*apply*create-sentence*3arg*INDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^param.<argc>.id <idc>
              ^state-rep.object-desc-set.obj-desc {<objd> <> <objd3>}
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^state-rep.object-desc-set.obj-desc {<objd3> <> <objd2>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^c <argc> ^negative <bool> ^name <prep>)
   (<objd> ^id <id> -^mentioned true)
   (<objd2> ^id <idb> ^mentioned true)
   (<objd3> ^id <idc> ^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^object3 <objd3>
           ^a <aspec> 
           ^b <bspec>
           ^c <cspec> 
           ^word <prep>
           ^prep <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier a)
   (<bspec> ^specifier the)
   (<cspec> ^specifier the)
}

sp {convert-TCN-to-NL*apply*create-sentence*DEFDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^negative <bool> ^name <prep> -^c)
   (<objd> ^id <id> ^mentioned true)
   (<objd2> ^id <idb> ^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^prep <prep>
           ^word <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec>  ^specifier the)
   (<bspec>  ^specifier the)
}
sp {convert-TCN-to-NL*apply*create-sentence*INDEFINDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^negative <bool> ^name <prep> -^c)
   (<objd> ^id <id> -^mentioned true)
   (<objd2> ^id <idb> -^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^prep <prep>
           ^word <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier a)
   (<bspec> ^specifier a)
}
sp {convert-TCN-to-NL*apply*create-sentence*DEFINDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^negative <bool> ^name <prep> -^c)
   (<objd> ^id <id> ^mentioned true)
   (<objd2> ^id <idb> -^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^prep <prep>
           ^word <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier the)
   (<bspec> ^specifier a)
}
sp {convert-TCN-to-NL*apply*create-sentence*INDEFDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^param.<argb>.id <idb>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b <argb> ^negative <bool> ^name <prep> -^c)
   (<objd> ^id <id> -^mentioned true)
   (<objd2> ^id <idb> ^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^prep <prep>
           ^word <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier a)
   (<bspec> ^specifier the)
}


sp {convert-TCN-to-NL*apply*create-sentence*DEF*bINDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b INDEF ^negative <bool> ^name <prep> -^c ^btype <type>)
   (<objd> ^id <id> ^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^word <prep>
           ^prep <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier the)
   (<bspec> ^specifier a)
   (<objd2> ^word <type>)
}
sp {convert-TCN-to-NL*apply*create-sentence*INDEF*bINDEF
   (state <s> ^name convert-TCN-to-NL
              ^count <c>
              ^param.<arga>.id <id>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^operator <o>)
   (<o> ^name create-sentence
        ^count <c>
        ^condition <cond>)
   (<cond> ^a <arga> ^b INDEF ^negative <bool> ^name <prep> -^c ^btype <type>)
   (<objd> ^id <id> -^mentioned true)
-->
   (<s> ^count <c> -)
   (<s> ^count (+ 1 <c>))
   (<s> ^sentence <sent>)
   (<sent> ^condition <cond>
           ^object1 <objd>
           ^object2 <objd2>
           ^a <aspec>
           ^b <bspec>
           ^word <prep>
           ^prep <prep>
           ^order <c>
           ^negative <bool>)
   (<aspec> ^specifier a)
   (<bspec> ^specifier a)
   (<objd2> ^word <type>)
}

sp {prefer*convert-TCN-to-NL*create-sentence*prefer*mentioned-similar-objects
   (state <s> ^name convert-TCN-to-NL
             # ^tcn.conditions.cond.prep <cond>
              ^state-rep.object-desc-set.obj-desc <objd>
              ^state-rep.object-desc-set.obj-desc {<objd2> <> <objd>}
              ^param.<arg1>.id <id>
              ^param.<arg2>.id <idb>
              ^operator <o1> +
              ^operator {<o2> <> <o1>} +)
   (<o1> ^name create-sentence ^condition <cond1>)
   (<o2> ^name create-sentence ^condition <cond2>)
   (<cond1> ^<< a b c >> <arg1>)
   (<cond2> ^<< a b c >> <arg2>)
   (<objd> ^id <id> ^mentioned true ^same-description <objd2>)
   (<objd2> ^id <idb> -^mentioned true)
   #to ensure unidirection preferences
 -{(<cond1> ^<< a b c >> <arg3>)
   (<cond2> ^<< a b c >> <arg4>)
   (<s> ^state-rep.object-desc-set.obj-desc <objd3>
        ^state-rep.object-desc-set.obj-desc {<objd4> <> <objd3>}
        ^param.<arg3>.id <idc>
        ^param.<arg4>.id <idd>)
   (<objd3> ^id <idc> -^mentioned true)
   (<objd4> ^id <idd> ^mentioned true ^same-description <objd3>)}
-->
   (<s> ^operator <o1> > <o2>)
}


sp {convert-TCN-to-NL*propose*complete-state
   (state <s> ^name convert-TCN-to-NL)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete-state
        ^category svs)
}

sp {convert-TCN-to-NL*apply*complete-state*copy-sentences
# :interrupt
   (state <s> ^name convert-TCN-to-NL
              ^description <d>
              ^sentence <sent>
              ^operator.name complete-state)
-->
   (<d> ^sentence <sent>)
}

sp {convert-TCN-to-NL*apply*complete-state
   (state <s> ^name convert-TCN-to-NL
            #  ^superstate.operator <op>
              ^superstate <ss>
              ^tcn <tcn>
              ^description <d>
              ^operator.name complete-state)
   -{(<s> ^sentence <se>)
     (<d> -^sentence <se>)}
-->
   (<ss> ^description <d>)
}
