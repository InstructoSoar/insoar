sp {game-start*propose*lookup-game
   (state <s> ^name game-start
             -^game
             -^failed
              ^superstate.operator.game-name <game>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-game
        ^full no
        ^category svs
        ^game-name <game>)
}

sp {game-start*propose*store-game-context
   (state <s> ^name game-start
              ^game <g>
              ^superstate.operator.game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-game-context
        ^category svs
        ^game-name <name>)
}

sp {game-start*propose*learn-new-game
   (state <s> ^name game-start
              ^failed true
              ^superstate.operator.game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name learn-new-game
        ^category svs
        ^game-name <name>)
}
sp {game-start*apply*learn-new-game
   (state <s> ^name game-start
              ^operator <o>
              ^topstate <ts>)
   (<o> ^name learn-new-game
        ^game-name <name>)
-->
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <name> ^game <g> ^ignore <ig> ^attend <at>)
   (<g> ^game-name <name> ^actions <a> ^goals <go> ^failures <fail> ^player-pieces <pie> ^heuristics <heu>)
   (<l> ^type mult ^action-number 0 ^goal-number 1 ^failure-number 2)
   (<fail> ^1 <fail1>)
   (<fail1> ^cond-args 0 ^conditions <coz> ^parameters <paz> ^name none ^failure-name none)
}

sp {game-start*apply*store-game-context
   (state <s> ^name game-start
              ^operator <o>
              ^game.multiplayer <m>
              ^topstate <ts>)
   (<o> ^name store-game-context
         ^game-name <name>)
-->
   (<ts> ^current-game <cg>)
   (<cg> ^game <game>)
   (<game> ^game-name <name> ^multiplayer <m>)
}


sp {game-start*send-message
   (state <s> ^name game-start
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^game <g>
              ^topstate.current-game.game.game-name <game>
              ^superstate.operator.game-name <game>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type game-start
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

sp {game-start*send-message*new-game
   (state <s> ^name game-start
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning.type mult
              ^superstate.operator.game-name <game>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-action
          ^fields <f>)
   (<f> ^game-name <game>)
   (<status> ^performed.dialog-event.type game)
}


#############################
#initiate
sp {game-initiate*send-message
   (state <s> ^name game-initiate
              ^topstate.io.output-link <out>
              ^topstate.status <status>)
-->
   (<out> ^send-message <msg>)
   (<msg> ^type play-game
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

## GAME OVER
sp {game-over*send-message
   (state <s> ^operator.name game-over
              ^topstate <ts>
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>)
   (<ts> ^current-game <cg>)
-->
   (<ts> ^current-game <cg> -)
   (<out> ^send-message <msg>)
   (<msg> ^type game-over
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

