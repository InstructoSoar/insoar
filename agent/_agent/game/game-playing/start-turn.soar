
sp {start-turn*propose*find-action
   (state <s> ^name start-turn
             -^action)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-action
        ^category svs) # for now determine better or new category)
}

#handle failed object/action look up
sp {start-turn*propose*do-action
   (state <s> ^name start-turn
              ^action <action>
              ^predicate <p>
             -^robot-state.arm.grabbed
             -^success
              ^obj1 <oa>
              ^obj2 <ob>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name do-action
        ^category svs
        ^action <action>
        ^predicate <p>
        ^obj1 <oa>
        ^obj2 <ob>)
}
sp {start-turn*elabroate*attend-to-arm 
   (state <s> ^name start-turn
              ^action <action>
              ^predicate <p>
              ^robot-state.arm.grabbed
              ^obj1 <oa>
              ^obj2 <ob>)
-->
   (<s> ^attend-to-arm true)
}
sp {do-action*propose*comprehend-action-command
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
             -^found-op
              ^predicate <p>
              ^obj2 <ob>)
   (<action> ^verb <verb-word>)
-->
   (<s> ^operator <o> + = )
   (<o> ^name comprehend-action-command ^parameter <pa> ^initialized true)
   (<pa> ^direct-object <do-param>
       ^pp-object <po-param>
       ^verb <verb-param>
       ^type action-command)
   (<do-param> ^type direct-object
               ^result <oa>)
   (<po-param> ^type pp-object
               ^result <res1>)
   (<res1> ^object <ob>)
   (<verb-param> ^type verb
                 ^lexical <verb-word>)
}

sp {do-action*apply*comprehend-action-command*hackforargument4
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument4 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument4 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument4 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument5
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument5 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument5 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument5 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument10
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument10 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument10 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument10 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument11
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument11 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument11 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument11 <arg4>)
   (<arg4> ^argument <ob>)
}

sp {do-action*apply*comprehend-action-command
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> ^<< argument2 argument3 argument4 argument5 argument6 argument7 argument8 argument9 argument10 argument11 >>)
-->
   (<s> ^found-op <op>)
}
#sp {do-action*apply*comprehend-action-command2
#   (state <s> ^name do-action
#              ^action <action>
#              ^obj1 <oa>
#              ^predicate <p>
#              ^obj2 <ob>
#              ^operator <o>)
#   (<o> ^name comprehend-action-command 
#        ^parameter <pa>)
#   (<pa> ^result <op>)
#   (<op> ^argument5)
#-->
#   (<s> ^found-op <op>)
#}
#sp {do-action*apply*comprehend-action-command3
#   (state <s> ^name do-action
#              ^action <action>
#              ^obj1 <oa>
#              ^predicate <p>
#              ^obj2 <ob>
#              ^operator <o>)
#   (<o> ^name comprehend-action-command 
#        ^parameter <pa>)
#   (<pa> ^result <op>)
#   (<op> ^argument6)
#-->
#   (<s> ^found-op <op>)
#}
#sp {do-action*apply*comprehend-action-command4
#   (state <s> ^name do-action
#              ^action <action>
#              ^obj1 <oa>
#              ^predicate <p>
#              ^obj2 <ob>
#              ^operator <o>)
#   (<o> ^name comprehend-action-command 
#        ^parameter <pa>)
#   (<pa> ^result <op>)
#   (<op> ^argument7)
#-->
#   (<s> ^found-op <op>)
#}


sp {do-action*store*topaction
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^topstate <ts>
              ^found-op <op>
              ^predicate <p1>
              ^obj2 <ob>)
-->
   (<ts> ^action-todo <op>)
}

sp {do-action*propose*topstateaction
   (state <s> ^topstate <s>
              ^action-todo <op>)
-->
   (<s> ^operator <o> +)
   (<o> ^name action
        ^purpose.parameters.indexable.result <op>
        ^indexed-action <op>)
}

sp {do-action*apply*indicate-completed-action
   (state <s> ^name action
              ^topstate <ts>
              ^topstate.action-todo <op>
            # -^topstate.robot-
              ^operator.name indicate-completed-action)
-->
   (<ts> ^action-todo <op> -)
}
sp {do-action*propose*indicate-completed-action
   (state <s> ^name action
              ^superstate-indexed-action.applied yes
              ^topstate.action-todo)
-->
   (<s> ^operator <o> + !)
   (<o> ^name indicate-completed-action)
}
sp {do-action*apply*indicate-completed-action*remove-projection
   (state <s> ^name action
              ^operator.name indicate-completed-action
              ^topstate.svs.command <cmd>)
   (<cmd> ^project <P11>)
-->
   (<cmd> ^project <P11> -)
}

sp {start-turn*propose*complete-turn
   (state <s> ^name start-turn
              ^completed-all-actions true)
 -->
   (<s> ^operator <o> +)
   (<o> ^name complete-turn
        ^category svs)
}


sp {start-turn*apply*complete-turn*solved*did-all-actions
   (state <s> ^name start-turn
              ^topstate.interaction.status <status>
              ^operator <o>)
   (<o> ^name complete-turn)
-->
   (<status> ^performed.dialog-event.type turn) 
}

sp {start-turn*apply*complete-turn*solved*remove-stale-actions
#   :interrupt
   (state <s> ^name start-turn
              ^topstate <ts>
              ^topstate.interaction.status <status>
              ^operator <o>)
   (<o> ^name complete-turn)
   (<ts> ^flound-action <fa>)
-->
   (<ts> ^flound-action <fa> -)
}

sp {start-turn*apply*complete-turn*solved*remove-game
   (state <s> ^name start-turn
              ^topstate <ts>
              ^operator <o>
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>)
   (<o> ^name complete-turn)
   (<ts> ^current-game <g>)
   (<g> ^game.multiplayer false)
-->
#   (<ts> ^current-game <g> -)
   (<out> ^send-message <msg>)
   (<msg> ^type puzzle-solved
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}
