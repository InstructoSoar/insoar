sp {convert-TCN-to-NLP*elaborate*state
   (state <s> ^name convert-TCN-to-NLP
              ^superstate.operator <o>)
   (<o> ^tcn <tcn>)
-->
   (<s> ^set <tcn>)
}

sp {convert-TCN-to-NLP*elaborate*state2
   (state <s> ^name convert-TCN-to-NLP)
-->
   (<s> #^tcn <tcn>
        ^condition <c3> <c4> <c5>     
        ^nlp-set <nps>)
 (<c4> ^name block ^rtype single)  
 (<c3> ^name location ^rtype single)
 (<c5> ^name object ^rtype single)

#  (<tcn> ^goals <A>)
# (<A> ^1 <ac1>) 
# (<ac1> ^action-name move ^conditions <xc> ^parameters <xp> ^verbs <verbs2> ^cond-args 2)
# (<xp> ^1 <xparama> ^2 <xparamb>)
# (<xparama> ^type block)
# (<xparamb> ^type object)
# (<xc> ^1 <xconda> ^2 <xcondb> ^cond <newcond>)
# (<newcond> ^prep <xprepa1> ^prep <xprepa2> ^prep <xprepb1>)
# (<xconda> ^prep <xprepa1> ^prep <xprepa2>)
# (<xcondb> ^prep <xprepb1>)
# (<xprepa1> ^name below ^a 1 ^b INDEF ^negative true ^btype block) 
# (<xprepa2> ^name smaller-than ^a 1 ^b 2 ^negative false ^btype object)# ^btype block ^btype location)
# (<xprepb1> ^name below ^a 2 ^b INDEF ^negative true ^btype block)
 
# (<verbs2> ^1 <va2>)
# (<va2> ^verb-name move ^verb-prep on ^1 1 ^2 2)
 
# (<ac1> ^action-name place ^conditions <c> ^parameters <p> ^verbs <verbs> ^cond-args 2)
# (<p> ^1 <parama> ^2 <paramb>)
# (<parama> ^type block)
# (<paramb> ^type location)
# (<c> ^1 <conda> ^2 <condb> ^cond <newconds1>)
# (<newconds1> ^prep <prep3> ^prep <prep4> ^prep <prep5>)
# (<conda> ^attribute <atr3>)
# (<atr3> ^attr blue)
# (<prep3> ^name on ^a 1 ^b INDEF ^negative true ^btype location)
# (<prep4> ^name below ^a 1 ^b INDEF ^negative true ^btype block)
# (<prep5> ^name below ^a 2 ^b INDEF ^negative true ^btype block)
 
# (<verbs> ^1 <va>)
# (<va> ^verb-name move ^verb-prep on ^1 1 ^2 2)
}

#sp {convert-TCN-to-NLP*elaborate*set*action
#   (state <s> ^name convert-TCN-to-NLP
#              ^superstate.operator.type action
#              ^tcn.actions <act>)
 #  (<act> ^1 <a>)
#-->
#   (<s> ^set <a>)
#}


sp {convert-TCN-to-NLP*elaborate*parameter*attr
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^set <a>)
   (<c> ^name <type>)
   (<a> ^parameters.{<num> << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>}.type <type> ^conditions.<num>.attribute.attr <attr>)
-->
   (<s> ^<num> <c1>)
   (<c1> ^name <attr> ^args <ag2>)
   (<ag2> ^1 <c>)
}
sp {convert-TCN-to-NLP*elaborate*parameter
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^set <a>)
   (<c> ^name <type>)
   (<a> ^parameters.{<num> << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>}.type <type> -^conditions.<num>.attribute.attr <attr>)
-->
   (<s> ^<num> <c>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*INDEF
   (state <s> ^name convert-TCN-to-NLP
              ^condition <c>
              ^<num> <c2>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<c> ^name <type>)
   (<cond> ^name <name> ^negative <neg> ^a <num> ^b INDEF -^c ^btype <type>)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args>)
   (<p3z> ^result.link <p1b> ^1 <p1b>)
   (<p1b> ^param-id <num>)
   (<args> ^1 <c2> ^2 <c>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*not-INDEF
   (state <s> ^name convert-TCN-to-NLP
              ^<num2> <c2>
              ^<num> <c>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<cond> ^name <name> ^negative <neg> ^a <num> ^b <num2> -^b INDEF -^c)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args>)
   (<p3z> ^result.link <p1b> ^1 <p1b> ^2 <p2b>)
   (<p1b> ^param-id <num>)
   (<p2b> ^param-id <num2>)
   (<args> ^1 <c> ^2 <c2>)
}

sp {convert-TCN-to-NLP*elaborate*nlp*3args
   (state <s> ^name convert-TCN-to-NLP
              ^<num3> <c3>
              ^<num2> <c2>
              ^<num> <c>
              ^set <a>)
   (<a> ^conditions.cond.prep <cond>)
   (<cond> ^name <name> ^negative <neg> ^a <num> ^b <num2> ^c <num3>)
-->
   (<s> ^nlp <co>)
   (<co> ^name <name> ^negative <neg> ^parameter <p3z> ^args <args>)
   (<p3z> ^result.link <p1b> ^1 <p1b> ^2 <p2b> ^3 <p3b>)
   (<p1b> ^param-id <num>)
   (<p2b> ^param-id <num2>)
   (<p3b> ^param-id <num3>)
   (<args> ^1 <c> ^2 <c2> ^3 <c3>)
}

sp {convert-TCN-to-NLP*propose*complete
   (state <s> ^name convert-TCN-to-NLP)
-->
   (<s> ^operator <op> + =)
   (<op> ^name complete)
}

sp {convert-TCN-to-NLP*apply*complete
   (state <s> ^name convert-TCN-to-NLP
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
   (<nps> ^nlp <nlp>)
}
sp {convert-TCN-to-NLP*apply*complete*name
   (state <s> ^name convert-TCN-to-NLP
              ^nlp-set <nps>
              ^set.name <name>
              ^operator.name complete)
-->
   (<nps> ^name <name>)
}
sp {convert-TCN-to-NLP*apply*complete*superstate*copy
 #  :interrupt
   (state <s> ^name convert-TCN-to-NLP
              ^superstate <ss>
              ^superstate.operator.type <type>
              ^set.name <name>
              ^nlp-set <nps>
              ^operator.name complete)
   (<ss> ^<type> <t>)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
-->
   (<t> ^nlp-set <nps> ^name <name>)
}