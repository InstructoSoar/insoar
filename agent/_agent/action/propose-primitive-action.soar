####### propose pick-up for objects #########################################
sp {propose*pickup*object
   (state <s> ^problemspace.action <act>
   	      ^object <obj>
	      ^environment <env>)
   (<env> -^grabbed <any>
	   ^clear <obj>)
   (<act> -^type none)
   (<obj> -^category << location bin blocker >>)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up-object
   	 ^argument1 <obj>
	 ^action-type primitive)
}

######## propose put an object in a position #################################
sp {propose*put-down
   (state <s> ^problemspace.action <act>
   	      ^object {<obj> <> <gobj>}
	      ^environment <env>)
   (<env> ^grabbed <gobj>)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down-object-location
   	 ^argument1 <gobj>
	 ^argument2 <new>
	 ^action-type primitive)
   (<new> ^argument <obj>)
}

## SM: put here to avoid learning specific chunks in task learning. as a rule, temporary elaborations on objects should be avoided to get chunking to work correctly. 

sp {propose*put-down*moving-object
   (state <s> ^operator <op> +
   	      ^quiescence t)
   (<op> ^name op_put-down-object-location
   	 ^argument1 <gobj>)
-->
   (<gobj> ^moving-object true)
}

###################### propose open location #################################
sp {propose*open*location
   (state <s> ^problemspace.action <act>
   	      ^object <obj>
	      ^environment.closed <obj>)
   (<act> -^type none)
 -->
   (<s> ^operator <op> +)
   (<op> ^name op_open-location
   	 ^argument1 <obj>
	 ^action-type primitive)
}

###################### propose close location ##################################
sp {propose*close*location
   (state <s> ^problemspace.action <act>
   	      ^object <obj>
	      ^environment.open <obj>)
   (<act> -^type none)
 -->
   (<s> ^operator <op> +)
   (<op> ^name op_close-location
   	 ^argument1 <obj>
	 ^action-type primitive)
}

######################### propose wait ########################################
sp {propose*op_wait*operator
   (state <s> ^problemspace.action <act>)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_wait
   	 ^action-type primitive)
}
   

#################### point #######################################	    	     
 
# sp {propose*point*object
#    (state <s> ^problemspace.action <act>
#     	      ^object <obj>)
#    (<act> -^type none)
# -->
#    (<s> ^operator <op> +)
#    (<op> ^name op_point-to-object
#    	 ^argument1 <nobj>
# 	 ^action-type primitive)
#    (<nobj> ^argument <obj>)
# }
   

#################### activate #################################
sp {propose*activate*stove
   (state <s> ^problemspace.action <act>
 	      ^object <obj>
	      ^environment <env>)
   (<env> ^off <obj>)
   	# ^closed <obj>)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_activate
   	 ^argument1 <obj>
	 ^action-type primitive)
}

#################### stop #################################
sp {propose*stop*stove
   (state <s> ^problemspace.action <act>
 	      ^object <obj>
	      ^environment.on <obj>)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_stop
   	 ^argument1 <obj>
	 ^action-type primitive)
}
