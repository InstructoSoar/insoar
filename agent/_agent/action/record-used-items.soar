sp {action*apply*primitive*record*used-object*arg1
   (state <s> ^problemspace.action <act>
              ^io # Not in imagined world
              ^operator <o>
              ^topstate.interaction.stack.segment.next <prev-seg>)
   (<o> ^action-type primitive
        ^argument1 <obj>)
   (<prev-seg> ^purpose.type action-command
               ^info.used-objects <objs>)
-->
   (<objs> ^object <obj>)
}

sp {action*apply*primitive*record*used-object*arg2*argument
   (state <s> ^problemspace.action <act>
              ^io # Not in imagined world
              ^operator <o>
              ^topstate.interaction.stack.segment.next <prev-seg>)
   (<o> ^action-type primitive
        ^argument2.argument <obj>)
   (<prev-seg> ^purpose.type action-command
               ^info.used-objects <objs>)
-->
   (<objs> ^object <obj>)
}

sp {action*apply*primitive*record*used-relation*arg2*relation
   (state <s> ^problemspace.action <act>
              ^io # Not in imagined world
              ^operator <o>
              ^topstate.interaction.stack.segment.next <prev-seg>)
   (<o> ^action-type primitive
        ^argument2.relation <rel>)
   (<prev-seg> ^purpose.type action-command
               ^info.used-relations <rels>)
-->
   (<rels> ^relation <rel>)
}

sp {action*apply*primitive*record*used-action*op_name
   (state <s> ^problemspace.action <act>
              ^io # Not in imagined world
              ^operator <o>
              ^topstate.interaction.stack.segment.next <prev-seg>)
   (<o> ^action-type primitive
        ^name <op-name>)
   (<prev-seg> ^purpose.type action-command
               ^info.used-actions <actions>)
-->
   (<actions> ^action <op-name>)
}