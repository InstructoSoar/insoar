##############################################################
#### elaborate composite-action problemspace
##############################################################
sp {composite-action*elaborate*problemspace
   (state <s> ^superstate.operator.action-type composite
   	      ^problemspace <ps>
         -^problemspace games
	      -^name evaluate-operator)
-->
   (<ps> ^action <act>
   	 ^state <nst>
	 ^learning <l>)
   (<act> ^category composite)
   (<s> ^name action)
}

sp {composite-action*elaborate*problemspace*action
   (state <s> ^superstate <ss> 
	      ^problemspace.action <act>
	      -^name evaluate-operator)
   (<ss> ^problemspace <sps>
   	 ^operator.action-type composite)
   (<sps> ^action <sact>)
   (<sact> ^<arg> <val>)
-->
   (<act> ^<arg> <val>)
}

#### elaborate composite-action problemspace*learning
sp {composite-action*elaborate*problemspace*learning
   (state <s> ^superstate <ss> 
	      ^problemspace <ps>
	      -^name evaluate-operator)
   (<ps> ^learning <l>
   	 ^action.category composite)
   (<ss> ^problemspace <sps>
         ^operator.action-type composite)
   (<sps> ^learning.type <type>)
-->
   (<l> ^type <type>)
}


# IROS: turn off chunking
#sp {composite-action*elaborate*problemspace*learning*chunking
#   (state <s> ^problemspace <ps>
#	      -^name evaluate-operator
#	      ^superstate <ss>)
#   (<ps> ^learning <l>
#   	 ^action <act>)
#   (<ss> ^problemspace <sps>
#         ^operator.action-type composite)
#   (<act> ^category composite
#   	  ^type {<any> <> execute <> project})
#-->
#   (<l> ^use chunking)
#}

#### elaborate composite-action problemspace*state
sp {composite-action*elaborate*problemspace*state*type
   (state <s> ^superstate <ss> 
	      ^problemspace <ps>
	      -^name evaluate-operator)
   (<ps> ^action.category composite
   	 ^state <st>)
   (<ss> ^problemspace <sps>
   	 ^operator.action-type composite)
   (<sps> ^state.type <type>)
-->
   (<st> ^type <type>)
}

sp {composite-action*elaborate*problemspace*state*elaborate-closed-word
   (state <s> ^problemspace <ps>
	      -^name evaluate-operator)
   (<ps> ^action.category composite
   	 ^state <st>)
-->
   (<st> ^elaborate closed-world)
}

####################################################################

####################################################################
#### elaborate map, goal, procedural ids
sp {composite-operator*elaborate*map-id
   (state <s> ^problemspace.action <act>
	      ^superstate.operator <sop>)
   (<sop> ^_metadata.map-id <map-id>)
   (<act> ^category composite)
-->
   (<s> ^map-id <map-id>)
}

sp {composite-operator*elaborate*other-ids
   (state <s> ^problemspace.action <act>
	      ^map-id <map-id>)
   (<map-id> ^procedural <proc-id>
   	     ^action-space <as-id>
	     ^goal <gid>)
   (<act> ^category composite)
-->
   (<s> ^procedural-id <proc-id>
   	^action-space-id <as-id>
	^goal-id <gid>)
}




#################### elaborate smem-query #######################
sp {composite-operator*query*map-id
   (state <s> ^problemspace.action <act>
	      ^superstate.operator <sop>)
   (<sop> ^_metadata.procedural <pid>)
   (<act> ^category composite)
-->
   (<s> ^smem-query-cue <cue>)
   (<cue> ^procedural <pid>)
}

sp {composite-operator*elaborate*map-id*procedural*query
   (state <s> ^problemspace.action <act>
	      ^smem-query-cue <scue>
	      ^retrieved-lti-cue <rlc>)
   (<rlc> ^cue <scue>
   	  ^retrieved-lti <lti>)
   (<scue> ^procedural <any>)
   (<act> ^category composite)
-->
   (<s> ^map-id <lti>)
}


### elaborate action-space-operator as indexed-action
# sp {elaborate*action-space-operator*indexed-action
#    (state <s> ^action-space-operator <op>
#    	      -^name evaluate-operator)
# -->
#    (<s> ^indexed-action <op>)
# }

sp {elaborate*lookahead-operator*indexed-action
   (state <s> ^look-ahead-operator <op>)
-->
   (<s> ^indexed-action <op>)
}