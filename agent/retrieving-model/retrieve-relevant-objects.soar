sp {retrieve-model*propose*query-smem-for-object
(state <s> ^world.objects.object <obj>
		^name retrieve-model
		^name task-state-no-change)
(<obj> -^retrieved <ret>
-->
(<s> ^operator <o> + =)
(<o> ^name query-smem-for-object
	 ^object <obj>)
}

#queries for the effect (one object with a predicate)
sp {retrieve-model*apply*query-smem-for-object
(state <s> ^operator <o>
		^smem.command <smemCmd>
		^world.objects.object <obj>
		^name retrieve-model
		^name task-state-no-change)
(<obj> ^root-category <root-cat>)
(<o> ^name query-smem-for-object
	 ^object <obj>)
-->
(<smemCmd> ^query <effect>)
(<effect> ^category <root-cat>)	
}

#propose move result
sp {retrieve-model*propose*operator*move-results*object
(state <s> ^smem.result.success <succ>
		^smem.command.query <qr>
		^name retrieve-model
		^name task-state-no-change)
-->
(<s> ^operator <o> + > =)
(<o> ^name move-results)
}

sp {retrieve-model*apply*operator*move-results*object
(state <s> ^operator <o>
		^smem.command <cmd>
		^smem.result.retrieved <objLTI>
		^world.objects.object <obj>
		^name retrieve-model
		^name task-state-no-change)
(<o> ^name move-results)
(<cmd> ^query <elem>)
(<obj> ^root-category <root-category>)
(<objLTI> ^category <root-category>)
-->
(<obj> ^retrieved <objLTI>)
(<cmd> ^query <elem> -)
}