#ground participants
sp {elaborate*ground*participants 
(state <s1> ^type state
		^model <md>
		^world <world>
		^flag retrieve-model)
(<md> ^retrieved <ret>
	 -^type precondition)
(<ret> ^participants.participant <partic>)
(<partic> ^category <cat>)
(<world> ^objects.object <obj>)
(<obj> ^predicates.category <cat>)
-->
(write | Participant grounded. |)
(<obj> ^grounded <partic>)
(<partic> ^grounded <x>)
}

#needed to avoid chunking bug
# sp {propose*ground*participants_pre
# (state <s1> ^type state
# 		^model <md>
# 		^flag retrieve-model
# 		^world <world>)
# (<md> ^retrieved <ret>
# 	 ^type precondition)
# (<ret> ^participants.participant <partic>)
# (<partic> ^category <cat>)
# (<world> ^objects.object <obj>)
# (<obj> ^predicates.category <cat>)
# -->
# (<s1> ^operator <o> + > =)
# (<o> ^name ground-participants)
# }

# sp {apply*ground*participants_pre
# (state <s1> ^type state
# 		^model <md>
# 		^world <world>
# 		^flag retrieve-model
# 		^operator <o>)
# (<o> ^name ground-participants)
# (<md> ^retrieved <ret>)
# (<ret> ^participants.participant <partic>)
# (<partic> ^category <cat>)
# (<world> ^objects.object <obj>)
# (<obj> ^predicates.category <cat>)
# -->
# (write | Participant grounded. |)
# (<obj> ^grounded <partic>)
# (<partic> ^grounded <x>)
# }

# sp {propose*missing*participants 
# (state <s1> ^type state
# 		^model.retrieved.participants.participant <partic>
# 		^world <world>
# 		^flag retrieve-model)
# (<partic> -^grounded <x>)
# -->
# (<s1> ^operator <o> + >)
# (<o> ^name missing_participant)
# }

# sp {apply*missing*participants 
# (state <s1> ^type state
# 		^model <model>
# 		^operator <o>
# 		^smem.command <cmmd>
# 		^flag retrieve-model)
# (<model> ^retrieved <ret>)
# (<ret> ^effects.effect <efcts>)
# (<o> ^name missing_participant)
# -->
# (<cmmd> ^prohibit <efcts>)
# (<model> ^retrieved <ret> -)
# }

