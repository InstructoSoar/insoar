#precondition is met, new goal cause
# sp {propose*cause*createGoal
# (state <s1> ^type state
# 	        ^model <md>
# 	        -^goal <gol>)
# (<md> ^preconditions true
# 	  ^cause false)
# -->
# (<s1> ^operator <o> + =)
# (<o> ^name create_cause_goal)
# }

# sp {apply*cause*createGoal
# (state <s1> ^type state
# 	        ^model <md>
# 	        ^operator <o>
# 	        -^goal <gol>)
# (<o> ^name create_cause_goal)
# (<md> ^preconditions true
# 	  ^cause false
# 	  ^retrieved.causes.cause <cs>)
# -->
# (<s1> ^goal <gl>)
# (<gl> ^task <t1>
# 	  ^type cause)
# (<t1> ^finished false
# 	  ^cause <cs>)
# }

# sp {propose*cause*goalMet
# (state <s1> ^type state
# 	        ^world <w1>
# 	        ^goal <gol>)
# (<gol> ^task <t1>
# 	   ^type cause)
# (<t1> ^finished false
# 	  ^cause <cs>)
# (<cs> ^object <obj>)
# (<obj> ^category <cat>
# 	   ^predicates <pred>)
# (<pred> ^name <predName>
# 	    ^value <predValue>)
# (<w1> ^objects.object <objW>)
# (<objW> ^predicates.<predName> <predValue>
# 	    ^predicates.category <cat>)
# -->
# (<s1> ^operator <o> + =)
# (<o> ^name cause_goal_met)
# }

# sp {apply*cause*goalMet
# (state <s1> ^type state
# 	        ^operator <o>
# 	        ^goal <gl>
# 	        ^model <md>)
# (<o> ^name cause_goal_met)
# (<md> ^preconditions true
# 	  ^cause false)
# (<gl> ^task <t1>
# 	   ^type cause)
# (<t1> ^finished false
# 	  ^cause <cs>)
# -->
# (<md> ^cause true
# 	  ^cause false -)
# (<t1> ^finished true
# 	  ^finished false -)
# }

sp {elaborate*ground*cause1
(state <s1> ^type state
		^model.retrieved <md>
		^world <world>
		^flag retrieve-model)
(<md> ^participants.participant <partic>
	  ^causes.cause <cause>)
(<cause> ^object.participant <partic>
	     ^task-operator.arg1 <arg>)
(<arg> ^id.category <root-cat>)
(<world> ^objects.object <obj>)
(<obj> ^grounded <partic>
	   ^predicates.category <root-cat>)
-->
(<arg> ^id <obj>)
}

sp {elaborate*ground*cause2
(state <s1> ^type state
		^model.retrieved <md>
		^world <world>
		^flag retrieve-model)
(<md> ^participants.participant <partic>
	  ^causes.cause <cause>)
(<cause> ^object.participant <partic>
	     ^task-operator.arg2 <arg>)
(<arg> ^id.category <root-cat>)
(<world> ^objects.object <obj>)
(<obj> ^grounded <partic>
	   ^predicates.category <root-cat>)
-->
(<arg> ^id <obj>)
}


# #I need to create an operator based on what was retrieved
# sp {propose*create*operator2
# (state <s> ^superstate <s1>
# 		   ^model <md>
# 		   ^flag retrieve-model)
# (<md> ^retrieved.causes.cause.task-operator <tskOp>
# 	^preconditions true
# 	^cause false)
# (<tskOp> ^arg1.id <something1>)
# (<tskOp> ^arg2.id <something2>)
# -->
# (<s1> ^operator <tskOp> + = >
# 	^retrieved-model true)
# }

# sp {propose*create*operator1
# (state <s> ^model <md>
#   ^flag retrieve-model)
# (<md> ^preconditions true)
# -->
# (<s> ^operator <o> + = >)
# (<o> ^name create-task-operator)
# }

# #I need to create an operator based on what was retrieved
# sp {apply*create*operator1
# (state <s> ^superstate <s1>
#   ^model <md>
#   ^flag retrieve-model
#   ^operator <o>)
# (<md> ^retrieved.causes.cause.task-operator <tskOp>)
# (<o> ^name create-task-operator)
# -->
# (<s1> ^flag ITISWORKINGMAYBE
#  ^op <tskOp>)
# }

# sp {propose*create*operator2
# (state <s> ^model <md>
# 		   ^flag ITISWORKINGMAYBE
# 		   ^op <tskOp>)
# -->
# (<s> ^operator <tskOp> +)
# }

sp {propose*create*operator1
(state <s> ^model <md>
		   ^flag retrieve-model)
(<md> ^preconditions true)
(<md> ^retrieved.causes.cause.task-operator <tskOp>)
-->
(<s> ^operator <o> + = >)
(<o> ^name create-task-operator)
(<o> ^tskOp (deep-copy <tskOp>))
}

#I need to create an operator based on what was retrieved
sp {apply*create*operator1
(state <s> ^superstate <s1>
		   ^flag retrieve-model
		   ^operator <o>)
(<o> ^name create-task-operator
	^tskOp <tskOp>)
-->
(<s1> ^flag ITISWORKINGMAYBE)
(<s1> ^op <tskOp>)
}

sp {propose*create*operator2
(state <s> ^model <md>
		   ^flag ITISWORKINGMAYBE
		   ^op <tskOp>)
-->
(<s> ^operator <tskOp> + = >)
}

# #retract the old operator 
# sp {elaborate*OpNoChangeRemoveOldOp
# (state <s1> ^type state
# 		^superstate <s>
# 		^impasse no-change
# 		^attribute operator
# 		^flag retrieve-model)
# (<s> ^operator <o>)
# (<s> ^operator <o1> +)
# (<o> ^item-type task-operator
#      ^name <oName>)
# (<o1> ^name { <> <oName> <o1Name> })
# -->
# (<s> ^operator <o> < <o1> )
# }






